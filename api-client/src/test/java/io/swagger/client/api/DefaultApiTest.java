/*
 * Backend RESTful APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * Contact: randy@163.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import java.io.File;
import io.swagger.client.model.Group;
import io.swagger.client.model.Leave;
import io.swagger.client.model.MyTask;
import io.swagger.client.model.Person;
import io.swagger.client.model.User;
import io.swagger.client.model.UserGroup;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * 审批请假申请
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void auditLeaveUsingPOSTTest() throws ApiException {
        MyTask task = null;
        MyTask response = api.auditLeaveUsingPOST(task);

        // TODO: test validations
    }
    
    /**
     * 认领请假申请任务
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void claimLeaveTaskUsingPOSTTest() throws ApiException {
        MyTask task = null;
        String response = api.claimLeaveTaskUsingPOST(task);

        // TODO: test validations
    }
    
    /**
     * 请假申请
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLeaveUsingPOSTTest() throws ApiException {
        Leave leave = null;
        String response = api.createLeaveUsingPOST(leave);

        // TODO: test validations
    }
    
    /**
     * 创建人员信息
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPersonUsingPOSTTest() throws ApiException {
        Person person = null;
        Person response = api.createPersonUsingPOST(person);

        // TODO: test validations
    }
    
    /**
     * 创建用户组信息
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserGroupUsingPOSTTest() throws ApiException {
        UserGroup userGroup = null;
        UserGroup response = api.createUserGroupUsingPOST(userGroup);

        // TODO: test validations
    }
    
    /**
     * 创建用户信息
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserUsingPOSTTest() throws ApiException {
        User user = null;
        User user1 = null;
        User response = api.createUserUsingPOST(user, user1);

        // TODO: test validations
    }
    
    /**
     * 删除人员信息
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePersonUsingGETTest() throws ApiException {
        String name = null;
        String response = api.deletePersonUsingGET(name);

        // TODO: test validations
    }
    
    /**
     * 删除用户信息
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserByIdUsingGETTest() throws ApiException {
        Integer id = null;
        String response = api.deleteUserByIdUsingGET(id);

        // TODO: test validations
    }
    
    /**
     * 删除用户组信息
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserGroupUsingGETTest() throws ApiException {
        String groupName = null;
        String userGroupName = null;
        String response = api.deleteUserGroupUsingGET(groupName, userGroupName);

        // TODO: test validations
    }
    
    /**
     * 删除用户组信息
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserGroupUsingGET1Test() throws ApiException {
        Integer id = null;
        String response = api.deleteUserGroupUsingGET1(id);

        // TODO: test validations
    }
    
    /**
     * 删除用户信息
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserUsingGETTest() throws ApiException {
        String userName = null;
        String response = api.deleteUserUsingGET(userName);

        // TODO: test validations
    }
    
    /**
     * 查询代办任务列表
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCandidateTasksUsingGETTest() throws ApiException {
        String userName = null;
        List<MyTask> response = api.getCandidateTasksUsingGET(userName);

        // TODO: test validations
    }
    
    /**
     * 查询单个请假任务
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLeaveInfoUsingGETTest() throws ApiException {
        String id = null;
        MyTask response = api.getLeaveInfoUsingGET(id);

        // TODO: test validations
    }
    
    /**
     * 查询审批日志信息
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLeaveLogsUsingGETTest() throws ApiException {
        String processId = null;
        List<MyTask> response = api.getLeaveLogsUsingGET(processId);

        // TODO: test validations
    }
    
    /**
     * 查询自己的任务列表
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLeaveTasksUsingGETTest() throws ApiException {
        String userName = null;
        List<MyTask> response = api.getLeaveTasksUsingGET(userName);

        // TODO: test validations
    }
    
    /**
     * 查询单个人员信息
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPersonUsingGETTest() throws ApiException {
        String name = null;
        Person response = api.getPersonUsingGET(name);

        // TODO: test validations
    }
    
    /**
     * 查询单个用户信息
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserByIdUsingGETTest() throws ApiException {
        Integer id = null;
        User response = api.getUserByIdUsingGET(id);

        // TODO: test validations
    }
    
    /**
     * 查询单个用户组信息
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserGroupByIdUsingGETTest() throws ApiException {
        Integer id = null;
        UserGroup response = api.getUserGroupByIdUsingGET(id);

        // TODO: test validations
    }
    
    /**
     * 查询单个用户组信息
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserGroupUsingGETTest() throws ApiException {
        String groupName = null;
        UserGroup response = api.getUserGroupUsingGET(groupName);

        // TODO: test validations
    }
    
    /**
     * 查询单个用户信息
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserUsingGETTest() throws ApiException {
        String userName = null;
        User response = api.getUserUsingGET(userName);

        // TODO: test validations
    }
    
    /**
     * 查询所有人员信息
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPersonUsingGETTest() throws ApiException {
        List<Person> response = api.listPersonUsingGET();

        // TODO: test validations
    }
    
    /**
     * 查询所有用户组信息
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listUserGroupUsingGETTest() throws ApiException {
        List<UserGroup> response = api.listUserGroupUsingGET();

        // TODO: test validations
    }
    
    /**
     * 查询所有用户信息
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listUserUsingGETTest() throws ApiException {
        List<User> response = api.listUserUsingGET();

        // TODO: test validations
    }
    
    /**
     * 用户验证
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void loginUsingPOSTTest() throws ApiException {
        User user = null;
        User response = api.loginUsingPOST(user);

        // TODO: test validations
    }
    
    /**
     * test2
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void test2UsingGETTest() throws ApiException {
        String p1 = "123";
        User response = api.test2UsingGET(p1);
        System.out.println(response);
        // TODO: test validations
    }
    
    /**
     * test
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testUsingGETTest() throws ApiException {
        Group response = api.testUsingGET();

        // TODO: test validations
    }
    
    /**
     * test
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testUsingGET1Test() throws ApiException {
        String p1 = null;
        api.testUsingGET1(p1);

        // TODO: test validations
    }
    
    /**
     * 修改单个用户信息
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserUsingPOSTTest() throws ApiException {
        User user = null;
        api.updateUserUsingPOST(user);

        // TODO: test validations
    }
    
    /**
     * 修改单个用户组信息
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserUsingPOST1Test() throws ApiException {
        UserGroup userGroup = null;
        api.updateUserUsingPOST1(userGroup);

        // TODO: test validations
    }
    
    /**
     * uploadTest2
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadTest2UsingPOSTTest() throws ApiException {
        File img = null;
        Object response = api.uploadTest2UsingPOST(img);

        // TODO: test validations
    }
    
    /**
     * uploadTest
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadTestUsingPOSTTest() throws ApiException {
        File files = null;
        String response = api.uploadTestUsingPOST(files);

        // TODO: test validations
    }
    
}
